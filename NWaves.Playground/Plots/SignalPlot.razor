<BECanvas Width="700" Height="120" @ref="_canvasReference"></BECanvas>

@code {
    Canvas2DContext _context;
    BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _context = await _canvasReference.CreateCanvas2DAsync();
            await _context.SetStrokeStyleAsync("purple");
            await _context.SetFillStyleAsync("white");
        }
    }

    public async Task UpdateAsync(DiscreteSignal signal)
    {
        await _context.FillRectAsync(0, 0, _canvasReference.Width, _canvasReference.Height);

        if (signal is null) return;

        var stride = Math.Max(1, (int)(signal.Length / _canvasReference.Width));

        var offset = _canvasReference.Height / 2;

        await _context.BeginPathAsync();

        var i = 0;
        var x = 0.0;
        while (i < signal.Length - stride)
        {
            var j = 0;
            var min = 0.0;
            var max = 0.0;
            while (j < stride)
            {
                if (signal[i + j] > max) max = signal[i + j];
                if (signal[i + j] < min) min = signal[i + j];
                j++;
            }

            await _context.MoveToAsync(x, -min * offset + offset);
            await _context.LineToAsync(x, -max * offset + offset);

            x++;
            i += stride;
        }

        await _context.ClosePathAsync();
        await _context.StrokeAsync();
    }
}
