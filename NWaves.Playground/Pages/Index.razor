@page "/"
@inject IJSRuntime jsRuntime


<div class="p-5 text-center bg-image rounded-3" style="
    background-image: url('http://maharin.id/Backup_of_background%20PPT.jpg');
    background-repeat: no-repeat;
    height:200px;
    background-size: 100%;">
</div>
<h3></h3>

<MatFileUpload Label="Drop a single WAV file here or Browse" OnChange="@FileReady" style="padding: 30px; width: 360px; margin-left: auto;
    margin-right: auto; background :#e8f5fb"></MatFileUpload>

<div id="audios">

</div>

<SignalPlot @ref="_signalPlot"></SignalPlot>

@if (!string.IsNullOrEmpty(_errorText))
{
    <div>@_errorText</div>
}

@if (_signal is null)
{
    return;
}

<MatList TwoLine="true">
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.SamplingRate Hz</MatListItemPrimaryText>
            <MatListItemSecondaryText>Sampling rate</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
    <MatListDivider></MatListDivider>
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.Duration seconds</MatListItemPrimaryText>
            <MatListItemSecondaryText>Duration</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
    <MatListDivider></MatListDivider>
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.Length samples </MatListItemPrimaryText>
            <MatListItemSecondaryText>Length</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
    <MatListDivider></MatListDivider>
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.Rms()</MatListItemPrimaryText>
            <MatListItemSecondaryText>RMS</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
    <MatListDivider></MatListDivider>
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.Energy()</MatListItemPrimaryText>
            <MatListItemSecondaryText>Energy</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
    <MatListDivider></MatListDivider>
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.ZeroCrossingRate()</MatListItemPrimaryText>
            <MatListItemSecondaryText>ZCR</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
    <MatListDivider></MatListDivider>
    <MatListItem>
        <MatListItemText>
            <MatListItemPrimaryText>@_signal.Entropy()</MatListItemPrimaryText>
            <MatListItemSecondaryText>Entropy</MatListItemSecondaryText>
        </MatListItemText>
    </MatListItem>
</MatList>

@code
{
    DiscreteSignal _signal;
    SignalPlot _signalPlot;

    string _errorText;

    async Task FileReady(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();

            if (file is null)
            {
                return;
            }

            using var stream = new MemoryStream();

            await file.WriteToStreamAsync(stream);

            await jsRuntime.InvokeAsync<byte[]>("loadAudio", stream.ToArray(), "audios");

            stream.Seek(0, SeekOrigin.Begin);

            var waveFile = new WaveFile(stream);
            _signal = waveFile[Channels.Left];

            await _signalPlot.UpdateAsync(_signal);
        }
        catch (Exception e)
        {
            _errorText = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
