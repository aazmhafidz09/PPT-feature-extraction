@page "/extractors"
@inject IJSRuntime jsRuntime

@using NWaves.Playground.Util; 

<h3>FeatureExtractors</h3>

<MatFileUpload Label="Drop a single WAV file here or Browse" OnChange="@FileReady" style="padding: 18px; width: 360px; margin: 20px;"></MatFileUpload>

<div style="width: 100%;">@_errorText</div>

<SignalPlot @ref="_signalPlot" />
<SpectrogramPlot @ref="_spectrogramPlot" />

@if (_signal is null)
{
    return;
}

<MatTabGroup>
    <MatTab Label="MFCC">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatSelect Label="MFCC settings" @bind-Value="@MfccMode">
                    <MatOptionString Value="custom">custom</MatOptionString>
                    <MatOptionString Value="kaldi">Kaldi</MatOptionString>
                    <MatOptionString Value="librosa">librosa</MatOptionString>
                    <MatOptionString Value="pytorch">PyTorch / librosa</MatOptionString>
                    <MatOptionString Value="psf">python_speech_features</MatOptionString>
                </MatSelect>

                <MatAccordion Multi="true" style="margin-top: 25px; margin-bottom: 25px;">
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>General settings</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <p>
                                <MatTextField Label="Feature count" Outlined="true" @bind-Value="@_options.FeatureCount"></MatTextField>
                            </p>
                            @if (_inSeconds)
                            {
                                <p>
                                    <MatTextField Label="Frame duration" Outlined="true" @bind-Value="@_options.FrameDuration"></MatTextField>
                                    <MatTextField Label="Hop duration" Outlined="true" @bind-Value="@_options.HopDuration"></MatTextField>
                                    <MatCheckbox @bind-Value="@_inSeconds" Label="In seconds"></MatCheckbox>
                                </p>
                            }
                            else
                            {
                                <p>
                                    <MatTextField Label="Frame size" Outlined="true" @bind-Value="@_options.FrameSize"></MatTextField>
                                    <MatTextField Label="Hop size" Outlined="true" @bind-Value="@_options.HopSize"></MatTextField>
                                    <MatCheckbox @bind-Value="@_inSeconds" Label="In seconds"></MatCheckbox>
                                </p>
                            }
                            <p>
                                <MatSelectItem Label="Window type" @bind-Value="@_options.Window" Items="@_windowTypes"></MatSelectItem>
                            </p>
                            <p>
                                <MatTextField Label="Pre-emphasis" Outlined="true" @bind-Value="@_options.PreEmphasis"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Lifter size" Outlined="true" @bind-Value="@_options.LifterSize"></MatTextField>
                            </p>
                            <p>
                                <MatCheckbox @bind-Value="@_options.IncludeEnergy" Label="Include energy"></MatCheckbox>
                            </p>
                            @if (_mfccMode == "kaldi")
                            {
                            <p>
                                <MatCheckbox @bind-Value="@_removeDcOffset" Label="Remove DC offset"></MatCheckbox>
                            </p>
                            }
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>1) Spectrum</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Spectrum type" @bind-Value="@_options.SpectrumType" Items="@_spectrumTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>2) Mel filters</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTextField Label="Mel count" Outlined="true" @bind-Value="@_melCount"></MatTextField>
                            <MatTextField Label="Low frequency" Outlined="true" @bind-Value="@_options.LowFrequency"></MatTextField>
                            <MatTextField Label="High frequency" Outlined="true" @bind-Value="@_options.HighFrequency"></MatTextField>
                            <MatTextField Label="FFT size" Outlined="true" @bind-Value="@_options.FftSize"></MatTextField>
                            <MatTextField Label="Log floor" Outlined="true" @bind-Value="@_options.LogFloor"></MatTextField>
                            <p>
                                <MatButton Dense="true" Icon="check_circle" OnClick="@UpdateFilterbank">Compute</MatButton>
                            </p>
                            <FilterbankPlot @ref="_filterbankPlot" OnReady="@UpdateFilterbank" />
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>3) Nonlinearity</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Nonlinearity type" @bind-Value="@_options.NonLinearity" Items="@_nonLinearityTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>4) DCT</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelect Label="DCT type" @bind-Value="@DctType">
                                @for (var i = 1; i <= 4; i++)
                                {
                                    var dct = i.ToString();
                                    <MatOptionString Value="@dct">@dct</MatOptionString>
                                }
                            </MatSelect>
                            <MatCheckbox @bind-Value="@NormalizeDct" Label="Normalized"></MatCheckbox>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>

                <MatButton Dense="true" Icon="check_circle" OnClick="@ComputeMfcc">Compute</MatButton>
                <MatButton Dense="true" Icon="check_circle" OnClick="@ShowPythonCode">Show Python code</MatButton>
                <MatButton Dense="true" Icon="check_circle" OnClick="@ShowSharpCode">Show C# code</MatButton>
                <MatButton Dense="true" Icon="check_circle" OnClick="@ShowJson">Show JSON</MatButton>

                @if (_vectors != null)
                {
                    <MatTable Items="@_vectors" PageSize="10" class="mat-elevation-z5">
                        <MatTableHeader>
                            @foreach (var coeffName in _extractor.FeatureDescriptions)
                            {
                                <th style="font-size:0.8em; padding:2px;">@coeffName</th>
                            }
                        </MatTableHeader>
                        <MatTableRow>
                            @foreach (var coeff in context)
                                {
                                <td style="font-size:0.8em; padding:2px; height:10px;">@coeff.ToString("F4")</td>
                                }
                        </MatTableRow>
                    </MatTable>
                }
            </div>

            <MatDialog @bind-IsOpen="@_dialogIsOpen">
                <MatDialogTitle>Code</MatDialogTitle>
                <MatDialogContent>
                    <textarea rows="22" cols="52">
                        @_sourceCode
                    </textarea>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@CopyToClipboard">@_clipboardMessage</MatButton>
                    <MatButton OnClick="@(e => { _dialogIsOpen = false; })">OK</MatButton>
                </MatDialogActions>
            </MatDialog>

        </ChildContent>
    </MatTab>


    <MatTab Label="MelSpectrogram">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatAccordion Multi="true">
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>General</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <p>
                                <MatTextField Label="Feature count" Outlined="true" @bind-Value="@_options.FeatureCount"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Frame duration" Outlined="true" @bind-Value="@_options.FrameDuration"></MatTextField>
                                <MatTextField Label="Hop duration" Outlined="true" @bind-Value="@_options.HopDuration"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Frame size" Outlined="true" @bind-Value="@_options.FrameSize"></MatTextField>
                                <MatTextField Label="Hop size" Outlined="true" @bind-Value="@_options.HopSize"></MatTextField>
                            </p>
                            <p>
                                <MatSelectItem Label="Window type" @bind-Value="@_options.Window" Items="@_windowTypes"></MatSelectItem>
                            </p>
                            <p>
                                <MatTextField Label="Pre-emphasis" Outlined="true" @bind-Value="@_options.PreEmphasis"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Lifter size" Outlined="true" @bind-Value="@_options.LifterSize"></MatTextField>
                            </p>
                            <p>
                                <MatCheckbox @bind-Value="@_options.IncludeEnergy" Label="Include energy"></MatCheckbox>
                            </p>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>1) Spectrum</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Spectrum type" @bind-Value="@_options.SpectrumType" Items="@_spectrumTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>2) Mel filters</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTextField Label="Mel count" Outlined="true" @bind-Value="@_melCount"></MatTextField>
                            <MatTextField Label="Low frequency" Outlined="true" @bind-Value="@_options.LowFrequency"></MatTextField>
                            <MatTextField Label="High frequency" Outlined="true" @bind-Value="@_options.HighFrequency"></MatTextField>
                            <MatTextField Label="FFT size" Outlined="true" @bind-Value="@_options.FftSize"></MatTextField>
                            <MatTextField Label="Log floor" Outlined="true" @bind-Value="@_options.LogFloor"></MatTextField>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>3) Nonlinearity</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Nonlinearity type" @bind-Value="@_options.NonLinearity" Items="@_nonLinearityTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="Chroma">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="LPC">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="LPCC">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="PLP">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="Pitch">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
</MatTabGroup>

@code {
    SignalPlot _signalPlot;
    SpectrogramPlot _spectrogramPlot;
    FilterbankPlot _filterbankPlot;

    string _errorText;

    DiscreteSignal _signal;

    MfccExtractor _extractor;
    MfccOptions _options = new MfccOptions();
    List<float[]> _vectors;

    int _melCount;
    float[][] _filterbank;

    string _sourceCode;
    string _clipboardMessage = "Copy to clipboard";
    bool _dialogIsOpen = false;

    bool _inSeconds;
    bool _removeDcOffset;

    string _mfccMode;
    string MfccMode
    {
        get => _mfccMode;
        set
        {
            _mfccMode = value;
            switch (_mfccMode)
            {
                case "librosa":
                    SetLibrosaDefaults();
                    break;
                case "pytorch":
                    SetPytorchDefaults();
                    break;
                case "kaldi":
                    SetKaldiDefaults();
                    break;
                case "psf":
                    SetPythonSpeechFeaturesDefaults();
                    break;
                default:
                    SetMfccDefaults();
                    break;
            }

            UpdateFilterbank();
        }
    }

    string DctType
    {
        get => _options.DctType.Substring(0, 1);
        set => _options.DctType = value + _options.DctType.Remove(0, 1);
    }

    bool NormalizeDct
    {
        get => _options.DctType.EndsWith('N');
        set
        {
            if (value)
            {
                if (!_options.DctType.EndsWith('N'))
                {
                    _options.DctType += "N";
                }
            }
            else
            {
                _options.DctType = _options.DctType.Replace("N", "");
            }
        }
    }

    WindowType[] _windowTypes = Enum.GetValues(typeof(WindowType)).Cast<WindowType>().ToArray();
    SpectrumType[] _spectrumTypes = Enum.GetValues(typeof(SpectrumType)).Cast<SpectrumType>().ToArray();
    NonLinearityType[] _nonLinearityTypes = Enum.GetValues(typeof(NonLinearityType)).Cast<NonLinearityType>().ToArray();


    async Task FileReady(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file is null)
            {
                return;
            }

            using var stream = new MemoryStream();

            await file.WriteToStreamAsync(stream);

            stream.Seek(0, SeekOrigin.Begin);

            var waveFile = new WaveFile(stream);
            _signal = waveFile[Channels.Left];

            await _signalPlot.UpdateAsync(_signal);

            var spectrogram = new Stft(512, 128).Spectrogram(_signal);
            _spectrogramPlot.Update(spectrogram);

            MfccMode = "custom";
        }
        catch (Exception e)
        {
            _errorText = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void ComputeMfcc()
    {
        try
        {
            UpdateFilterbank();

            if (_mfccMode == "kaldi" && _removeDcOffset)
            {
                var options = _options.Cast<MfccOptions, MfccOptions>(); // simply copy options
                options.Window = WindowType.Rectangular;
                _extractor = new MfccExtractorKaldi(options, _options.Window);
            }
            else
            {
                _extractor = new MfccExtractor(_options);
            }
            _vectors = _extractor.ComputeFrom(_signal);


            // correction of the 1st coefficient for compliance with python_speech_features

            if (_mfccMode == "psf")
            {
                if (_options.IncludeEnergy)
                {
                    for (var i = 0; i < _vectors.Count; i++)
                    {
                        _vectors[i][0] -= (float)Math.Log(2);
                    }
                }
                else
                {
                    for (var i = 0; i < _vectors.Count; i++)
                    {
                        _vectors[i][0] -= (float)(Math.Log(2) * Math.Sqrt(_melCount));
                    }
                }
            }
        }
        catch (Exception e)
        {
            _errorText = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    void SetMfccDefaults()
    {
        _inSeconds = true;
        _melCount = 24;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBankSize = _melCount,
            Window = WindowType.Hann
        };
    }

    void SetLibrosaDefaults()
    {
        _inSeconds = false;
        _melCount = 40;

        var fftSize = 1024;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameSize = fftSize,
            HopSize = 512,
            FilterBank = FilterBanks.MelBankSlaney(_melCount, fftSize, _signal.SamplingRate, _options.LowFrequency, _options.HighFrequency),
            SpectrumType = SpectrumType.Power,
            NonLinearity = NonLinearityType.ToDecibel,
            DctType = "2N",
            FftSize = fftSize,
            Window = WindowType.Hann,
            LogFloor = 1e-10f
        };
    }

    void SetKaldiDefaults()
    {
        _inSeconds = true;
        _removeDcOffset = false;
        _melCount = 23;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBankSize = _melCount,
            LowFrequency = 20,
            NonLinearity = NonLinearityType.LogE,
            DctType = "2N",
            Window = WindowType.Hann,
            PreEmphasis = 0.97,
            LifterSize = 22
        };
    }

    void SetPytorchDefaults()
    {
        _inSeconds = false;
        _melCount = 24;

        var fftSize = 1024;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameSize = fftSize,
            HopSize = 512,
            FilterBankSize = _melCount,
            SpectrumType = SpectrumType.Power,
            NonLinearity = NonLinearityType.ToDecibel,
            DctType = "2N",
            FftSize = fftSize,
            Window = WindowType.Hann,
            LogFloor = 1e-10f
        };
    }

    void SetPythonSpeechFeaturesDefaults()
    {
        _inSeconds = true;
        _melCount = 26;

        var fftSize = 512;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 16,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBank = PythonSpeechFeatures.FilterBank(_signal.SamplingRate, _melCount, fftSize),
            SpectrumType = SpectrumType.PowerNormalized,
            NonLinearity = NonLinearityType.LogE,
            DctType = "2N",
            FftSize = fftSize,
            PreEmphasis = 0.97,
            LifterSize = 22,
            IncludeEnergy = false,
            Window = WindowType.Hann,
        };
    }

    const string LibrosaTemplate = "import librosa\n\n" +
                                   "signal, sr = librosa.load(FILE_PATH, sr=None)\n\n" +
                                   "m = librosa.feature.mfcc(\n" +
                                   "    signal,\n" +
                                   "    {0},\n" +
                                   "    n_mfcc={1},\n" +
                                   "    dct_type={2},\n" +
                                   "    norm={3},\n" +
                                   "    window={4},\n" +
                                   "    htk=False,\n" +
                                   "    n_mels={5},\n" +
                                   "    fmin={6},\n" +
                                   "    fmax={7},\n" +
                                   "    n_fft={8},\n" +
                                   "    hop_length={9},\n" +
                                   "    lifter={10},\n" +
                                   "    power={11},\n" +
                                   "    center=False)\n\n" +
                                   "m[:, 0]   # get the first vector\n";

    const string PsfTemplate = "import python_speech_features\n" +
                               "import scipy.io.wavfile as wav\n" +
                               "import numpy\n\n" +
                               "sr, signal = wav.read(FILE_PATH)\n\n" +
                               "signal = signal / 32768\n\n" +
                               "m = python_speech_features.base.mfcc(\n" +
                               "    signal,\n" +
                               "    samplerate={0},\n" +
                               "    winlen={1},\n" +
                               "    winstep={2},\n" +
                               "    numcep={3},\n" +
                               "    nfilt={4},\n" +
                               "    nfft={5},\n" +
                               "    lowfreq={6},\n" +
                               "    highfreq={7},\n" +
                               "    preemph={8},\n" +
                               "    ceplifter={9},\n" +
                               "    appendEnergy={10},\n" +
                               "    winfunc={11})\n\n" +
                               "m[0]   # get the first vector\n";

    const string KaldiTemplate = "import torchaudio\n" +
                                 "import torchaudio.compliance.kaldi\n\n" +
                                 "signal, sample_rate = torchaudio.load(FILE_PATH)\n\n" +
                                 "m = torchaudio.compliance.kaldi.mfcc(\n" +
                                 "    signal,\n" +
                                 "    {0},\n" +
                                 "    num_ceps={1},\n" +
                                 "    num_mel_bins={2},\n" +
                                 "    frame_length={3},\n" +
                                 "    frame_shift={4},\n" +
                                 "    low_freq={5},\n" +
                                 "    high_freq={6},\n" +
                                 "    window_type={7},\n" +
                                 "    cepstral_lifter={8},\n" +
                                 "    preemphasis_coefficient={9},\n" +
                                 "    use_energy={10},\n" +
                                 "    remove_dc_offset={11})\n\n" +
                                 "m[0]   # get the first vector\n";

    const string PytorchTemplate = "import torchaudio\n" +
                                   "import torchaudio.transforms as T\n\n" +
                                   "signal, sample_rate = torchaudio.load(FILE_PATH)\n\n" +
                                   "mfcc_transform = T.MFCC(\n" +
                                   "    sample_rate={0},\n" +
                                   "    n_mfcc={1},\n" +
                                   "    melkwargs={{\n" +
                                   "       'n_mels': {2},\n" +
                                   "       'n_fft': {3},\n" +
                                   "       'hop_length': {4},\n" +
                                   "       'f_min': {5},\n" +
                                   "       'f_max': {6},\n" +
                                   "       'power': {7}\n" +
                                   "       }}\n" +
                                   "    )\n\n" +
                                   "m = mfcc_transform(signal)\n\n" +
                                   "#librosa: \n" +
                                   "melspec = librosa.feature.melspectrogram(\n" +
                                   "    y=signal.numpy()[0], sr={0}, n_fft={3},\n" +
                                   "    win_length={3}, hop_length={4},\n" +
                                   "    n_mels={2}, fmin={5}, fmax={6},\n" +
                                   "    power={7}, htk=True, norm=None)\n\n" +
                                   "mfcc_librosa = librosa.feature.mfcc(\n" +
                                   "    S = librosa.core.spectrum.power_to_db(melspec),\n" +
                                   "    n_mfcc={1}, dct_type=2, norm='ortho')\n\n" +
                                   "m[0][:, 0]   # get the first vector (center=True!)\n";

    string LibrosaWindowString(WindowType window)
    {
        switch (window)
        {
            case WindowType.Hamming: return "hamming";
            case WindowType.Blackman: return "blackman";
            default: return "hann";
        }
    }

    string KaldiWindowString(WindowType window)
    {
        switch (window)
        {
            case WindowType.Hamming: return "hamming";
            case WindowType.Blackman: return "blackman";
            case WindowType.Rectangular: return "rectangular";
            default: return "hanning";
        }
    }

    string NumpyWindowString(WindowType window)
    {
        switch (window)
        {
            case WindowType.Hamming: return "numpy.hamming";
            case WindowType.Blackman: return "numpy.blackman";
            default: return "numpy.hanning";
        }
    }

    void ShowPythonCode()
    {
        switch (_mfccMode)
        {
            case "librosa":
                _sourceCode = string.Format(
                    LibrosaTemplate,
                    _signal.SamplingRate,
                    _options.FeatureCount,
                    _options.DctType[0],
                    _options.DctType.EndsWith("N") ? "'ortho'" : "None",
                    $"'{LibrosaWindowString(_options.Window)}'",
                    _melCount,
                    _options.LowFrequency,
                    _options.HighFrequency > 0 ? _options.HighFrequency : "None",
                    _options.FftSize,
                    _options.HopSize,
                    _options.LifterSize,
                    _options.SpectrumType == SpectrumType.Magnitude ||
                    _options.SpectrumType == SpectrumType.MagnitudeNormalized ? 1 : 2);
                break;

            case "psf":
                _sourceCode = string.Format(
                    PsfTemplate,
                    _signal.SamplingRate,
                    _inSeconds ? _options.FrameDuration * 1000 : _options.FrameSize * 1000.0 / _signal.SamplingRate,
                    _inSeconds ? _options.HopDuration * 1000 : _options.HopSize * 1000.0 / _signal.SamplingRate,
                    _options.FeatureCount,
                    _melCount,
                    _options.FftSize,
                    _options.LowFrequency,
                    _options.HighFrequency,
                    _options.PreEmphasis,
                    _options.LifterSize,
                    _options.IncludeEnergy,
                    $"{NumpyWindowString(_options.Window)}");
                break;

            case "pytorch":
                _sourceCode = string.Format(
                    PytorchTemplate,
                    _signal.SamplingRate,
                    _options.FeatureCount,
                    _melCount,
                    _options.FftSize,
                    _options.HopSize,
                    _options.LowFrequency,
                    _options.HighFrequency > 0 ? _options.HighFrequency : "None",
                    _options.SpectrumType == SpectrumType.Magnitude ||
                    _options.SpectrumType == SpectrumType.MagnitudeNormalized ? 1 : 2);
                break;

            case "kaldi":
            default:
                _sourceCode = string.Format(
                    KaldiTemplate,
                    _signal.SamplingRate,
                    _options.FeatureCount,
                    _melCount,
                    _inSeconds ? _options.FrameDuration * 1000 : _options.FrameSize * 1000.0 / _signal.SamplingRate,
                    _inSeconds ? _options.HopDuration * 1000 : _options.HopSize * 1000.0 / _signal.SamplingRate,
                    _options.LowFrequency,
                    _options.HighFrequency,
                    $"'{KaldiWindowString(_options.Window)}'",
                    _options.LifterSize,
                    _options.PreEmphasis,
                    _options.IncludeEnergy,
                    _removeDcOffset);
                break;
        }

        _clipboardMessage = "Copy to clipboard";
        _dialogIsOpen = true;
    }

    void ShowSharpCode()
    {
        // TODO
    }

    void ShowJson()
    {
        MemoryStream configStream;
        using (var ms = new MemoryStream())
        {
            ms.SaveOptions(_options);
            configStream = new MemoryStream(ms.ToArray()); // because ms is flushed inside SaveOptions()
        }

        using (var json = new StreamReader(configStream))
        {
            _sourceCode = json.ReadToEnd();
        }

        _clipboardMessage = "Copy to clipboard";
        _dialogIsOpen = true;
    }

    void UpdateFilterbank()
    {
        if (_options.FftSize <= 0)
        {
            _options.FftSize =
                _options.FrameSize > 0 ?
                MathUtils.NextPowerOfTwo(_options.FrameSize) :
                MathUtils.NextPowerOfTwo((int)(_options.FrameDuration * _signal.SamplingRate));
        }

        if (_mfccMode == "librosa")
        {
            _options.FilterBank = FilterBanks.MelBankSlaney(_melCount, _options.FftSize, _signal.SamplingRate, _options.LowFrequency, _options.HighFrequency);
            _filterbank = _options.FilterBank;
        }
        else if (_mfccMode == "psf")
        {
            _options.FilterBank = PythonSpeechFeatures.FilterBank(_signal.SamplingRate, _melCount, _options.FftSize, _options.LowFrequency, _options.HighFrequency);
            _filterbank = _options.FilterBank;
        }
        else
        {
            _options.FilterBankSize = _melCount;

            var melBands = FilterBanks.MelBands(_melCount, _signal.SamplingRate, _options.LowFrequency, _options.HighFrequency);
            _filterbank = FilterBanks.Triangular(_options.FftSize, _signal.SamplingRate, melBands, mapper: Scale.HerzToMel);
        }

        _filterbankPlot?.UpdateAsync(_filterbank);
    }

    async Task CopyToClipboard()
    {
        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _sourceCode);

        _clipboardMessage = "Copied!";
    }
}
