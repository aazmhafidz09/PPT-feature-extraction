@page "/extractors"
@inject IJSRuntime jsRuntime

@using NWaves.Playground.Components; 

<div class="p-5 text-center bg-image rounded-3" style="
    background-image: url('https://raw.githubusercontent.com/aazmhafidz09/PPT-feature-extraction/main/NWaves.Playground/wwwroot/assets/img/Backup_of_background%20PPT.jpg');
    background-repeat: no-repeat;
    height:200px;
    background-size: 100%;">
</div>

<h3></h3>

<MatFileUpload Label="Drop a single WAV file here or Browse" OnChange="@FileReady" style="padding: 30px; width: 360px; margin-left: auto;
    margin-right: auto; background :#e8f5fb"></MatFileUpload>

<div style="width: 100%;">@_errorText</div>

<SignalPlot @ref="_signalPlot" />
<SpectrogramPlot @ref="_spectrogramPlot" />

@if (_signal is null)
{
    return;
}

<MatTabGroup>
    <MatTab Label="MFCC">
        <ChildContent>
            <Mfcc Signal="@_signal" />
        </ChildContent>
    </MatTab>
    <MatTab Label="MelSpectrogram">
        <ChildContent>
            <MelSpectrogram Signal="@_signal" />
        </ChildContent>
    </MatTab>
    <MatTab Label="RASTA PLP">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>

</MatTabGroup>

@code {
    SignalPlot _signalPlot;
    SpectrogramPlot _spectrogramPlot;

    DiscreteSignal _signal;

    string _errorText;

    async Task FileReady(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file is null)
            {
                return;
            }

            using var stream = new MemoryStream();

            await file.WriteToStreamAsync(stream);

            stream.Seek(0, SeekOrigin.Begin);

            var waveFile = new WaveFile(stream);
            _signal = waveFile[Channels.Left];

            await _signalPlot.UpdateAsync(_signal);

            var spectrogram = new Stft(512, 128).Spectrogram(_signal);
            _spectrogramPlot.Update(spectrogram);
        }
        catch (Exception e)
        {
            _errorText = $"Data yang anda masukan bukan data WAV";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
