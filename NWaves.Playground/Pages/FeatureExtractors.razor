@page "/extractors"
@inject IJSRuntime jsRuntime

<h3>FeatureExtractors</h3>

<MatFileUpload Label="Drop a single WAV file here or Browse" OnChange="@FileReady" style="padding: 18px; width: 360px; margin: 20px;"></MatFileUpload>

<div style="width: 100%;">@_errorText</div>

<SignalPlot @ref="_signalPlot" />
<SpectrogramPlot @ref="_spectrogramPlot" />

@if (_signal is null)
{
    return;
}

<MatTabGroup>
    <MatTab Label="MFCC">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatSelect Label="MFCC settings" @bind-Value="@MfccMode">
                    <MatOptionString Value="custom">custom</MatOptionString>
                    <MatOptionString Value="kaldi">Kaldi</MatOptionString>
                    <MatOptionString Value="librosa">librosa</MatOptionString>
                    <MatOptionString Value="pytorch">PyTorch / librosa</MatOptionString>
                    <MatOptionString Value="psf">python_speech_features</MatOptionString>
                </MatSelect>

                <MatAccordion Multi="true" style="margin-top: 25px; margin-bottom: 25px;">
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>General settings</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <p>
                                <MatTextField Label="Feature count" Outlined="true" @bind-Value="@_options.FeatureCount"></MatTextField>
                            </p>
                            @if (_inSeconds)
                            {
                            <p>
                                <MatTextField Label="Frame duration" Outlined="true" @bind-Value="@_options.FrameDuration"></MatTextField>
                                <MatTextField Label="Hop duration" Outlined="true" @bind-Value="@_options.HopDuration"></MatTextField>
                                <MatCheckbox @bind-Value="@_inSeconds" Label="In seconds"></MatCheckbox>
                            </p>
                            }
                            else
                            {
                            <p>
                                <MatTextField Label="Frame size" Outlined="true" @bind-Value="@_options.FrameSize"></MatTextField>
                                <MatTextField Label="Hop size" Outlined="true" @bind-Value="@_options.HopSize"></MatTextField>
                                <MatCheckbox @bind-Value="@_inSeconds" Label="In seconds"></MatCheckbox>
                            </p>
                            }
                            <p>
                                <MatSelectItem Label="Window type" @bind-Value="@_options.Window" Items="@_windowTypes"></MatSelectItem>
                            </p>
                            <p>
                                <MatTextField Label="Pre-emphasis" Outlined="true" @bind-Value="@_options.PreEmphasis"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Lifter size" Outlined="true" @bind-Value="@_options.LifterSize"></MatTextField>
                            </p>
                            <p>
                                <MatCheckbox @bind-Value="@_options.IncludeEnergy" Label="Include energy"></MatCheckbox>
                            </p>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>1) Spectrum</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Spectrum type" @bind-Value="@_options.SpectrumType" Items="@_spectrumTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>2) Mel filters</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTextField Label="Mel count" Outlined="true" @bind-Value="@MelCount"></MatTextField>
                            <MatTextField Label="Low frequency" Outlined="true" @bind-Value="@_options.LowFrequency"></MatTextField>
                            <MatTextField Label="High frequency" Outlined="true" @bind-Value="@_options.HighFrequency"></MatTextField>
                            <MatTextField Label="FFT size" Outlined="true" @bind-Value="@_options.FftSize"></MatTextField>
                            <MatTextField Label="Log floor" Outlined="true" @bind-Value="@_options.LogFloor"></MatTextField>
                            <CascadingValue Value="@_options.FilterBank">
                                <FilterbankPlot @ref="_filterbankPlot" />
                            </CascadingValue>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>3) Nonlinearity</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Nonlinearity type" @bind-Value="@_options.NonLinearity" Items="@_nonLinearityTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>4) DCT</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelect Label="DCT type" @bind-Value="@DctType">
                                @for (var i = 1; i <= 4; i++)
                                {
                                    var dct = i.ToString();
                                    <MatOptionString Value="@dct">@dct</MatOptionString>
                                }
                            </MatSelect>
                            <MatCheckbox @bind-Value="@NormalizeDct" Label="Normalized"></MatCheckbox>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>

                <MatButton Dense="true" Icon="check_circle" OnClick="@ComputeMfcc">Compute</MatButton>
                <MatButton Dense="true" Icon="check_circle" OnClick="@ShowPythonCode">Show Python code</MatButton>
                <MatButton Dense="true" Icon="check_circle" OnClick="@ShowSharpCode">Show C# code</MatButton>
                <MatButton Dense="true" Icon="check_circle" OnClick="@ShowJson">Show JSON</MatButton>

                @if (_vectors != null)
                {
                    <MatTable Items="@_vectors" PageSize="10" class="mat-elevation-z5">
                        <MatTableHeader>
                            @foreach (var coeffName in _extractor.FeatureDescriptions)
                            {
                                <th style="font-size:0.8em; padding:2px;">@coeffName</th>
                            }
                        </MatTableHeader>
                        <MatTableRow>
                            @foreach (var coeff in context)
                                {
                                <td style="font-size:0.8em; padding:2px; height:10px;">@coeff.ToString("F4")</td>
                                }
                        </MatTableRow>
                    </MatTable>
                }
            </div>

            <MatDialog @bind-IsOpen="@_dialogIsOpen">
                <MatDialogTitle>Code</MatDialogTitle>
                <MatDialogContent>
                    <textarea rows="23" cols="40">
                        @_pythonCode
                    </textarea>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@CopyToClipboard">@_clipboardMessage</MatButton>
                    <MatButton OnClick="@(e => { _dialogIsOpen = false; })">OK</MatButton>
                </MatDialogActions>
            </MatDialog>

        </ChildContent>
    </MatTab>
    <MatTab Label="MelSpectrogram">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatAccordion Multi="true">
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>General</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <p>
                                <MatTextField Label="Feature count" Outlined="true" @bind-Value="@_options.FeatureCount"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Frame duration" Outlined="true" @bind-Value="@_options.FrameDuration"></MatTextField>
                                <MatTextField Label="Hop duration" Outlined="true" @bind-Value="@_options.HopDuration"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Frame size" Outlined="true" @bind-Value="@_options.FrameSize"></MatTextField>
                                <MatTextField Label="Hop size" Outlined="true" @bind-Value="@_options.HopSize"></MatTextField>
                            </p>
                            <p>
                                <MatSelectItem Label="Window type" @bind-Value="@_options.Window" Items="@_windowTypes"></MatSelectItem>
                            </p>
                            <p>
                                <MatTextField Label="Pre-emphasis" Outlined="true" @bind-Value="@_options.PreEmphasis"></MatTextField>
                            </p>
                            <p>
                                <MatTextField Label="Lifter size" Outlined="true" @bind-Value="@_options.LifterSize"></MatTextField>
                            </p>
                            <p>
                                <MatCheckbox @bind-Value="@_options.IncludeEnergy" Label="Include energy"></MatCheckbox>
                            </p>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>1) Spectrum</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Spectrum type" @bind-Value="@_options.SpectrumType" Items="@_spectrumTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>2) Mel filters</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatTextField Label="Mel count" Outlined="true" @bind-Value="@MelCount"></MatTextField>
                            <MatTextField Label="Low frequency" Outlined="true" @bind-Value="@_options.LowFrequency"></MatTextField>
                            <MatTextField Label="High frequency" Outlined="true" @bind-Value="@_options.HighFrequency"></MatTextField>
                            <MatTextField Label="FFT size" Outlined="true" @bind-Value="@_options.FftSize"></MatTextField>
                            <MatTextField Label="Log floor" Outlined="true" @bind-Value="@_options.LogFloor"></MatTextField>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                    <MatExpansionPanel>
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>3) Nonlinearity</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <MatSelectItem Label="Nonlinearity type" @bind-Value="@_options.NonLinearity" Items="@_nonLinearityTypes"></MatSelectItem>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="Chroma">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="LPC">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="LPCC">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="PLP">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
    <MatTab Label="Pitch">
        <ChildContent>
            <div style="margin-top: 25px;">
                <MatStringField Label="LPC order" Outlined="true"></MatStringField>
                <MatStringField Label="Pre-emphasis" Outlined="true"></MatStringField>
            </div>
        </ChildContent>
    </MatTab>
</MatTabGroup>

@code {
    SignalPlot _signalPlot;
    SpectrogramPlot _spectrogramPlot;
    FilterbankPlot _filterbankPlot;

    string _errorText;

    DiscreteSignal _signal;

    FeatureExtractor _extractor;
    MfccOptions _options = new MfccOptions();
    List<float[]> _vectors;

    string _pythonCode;
    string _clipboardMessage = "Copy to clipboard";
    bool _dialogIsOpen = false;

    bool _inSeconds = true;

    string _mfccMode = "custom";
    string MfccMode
    {
        get => _mfccMode;
        set
        {
            _mfccMode = value;
            switch (_mfccMode)
            {
                case "librosa":
                    SetLibrosaDefaults();
                    break;
                case "pytorch":
                    SetPytorchDefaults();
                    break;
                case "kaldi":
                    SetKaldiDefaults();
                    break;
                case "psf":
                    SetPythonSpeechFeaturesDefaults();
                    break;
                default:
                    SetMfccDefaults();
                    break;
            }

            _filterbankPlot.UpdateAsync(_options.FilterBank);
        }
    }

    int MelCount
    {
        get
        {
            if (_options.FilterBank is null)
            {
                return _options.FilterBankSize;
            }
            else
            {
                return _options.FilterBank.GetLength(0);
            }
        }
        set
        {
            if (_options.FilterBank is null)
            {
                _options.FilterBankSize = value;
            }
            else
            {
                if (_mfccMode == "librosa")
                {
                    _options.FilterBank = FilterBanks.MelBankSlaney(value, _options.FftSize, _signal.SamplingRate, _options.LowFrequency, _options.HighFrequency);
                }
                else if (_mfccMode == "psf")
                {
                    _options.FilterBank = PsfFilterbank(_signal.SamplingRate, value, _options.FftSize, _options.LowFrequency, _options.HighFrequency);
                }
            }
        }
    }

    string DctType
    {
        get => _options.DctType.Substring(0, 1);
        set => _options.DctType = value + _options.DctType.Remove(0, 1);
    }

    bool NormalizeDct
    {
        get => _options.DctType.EndsWith('N');
        set
        {
            if (value)
            {
                if (!_options.DctType.EndsWith('N'))
                {
                    _options.DctType += "N";
                }
            }
            else
            {
                _options.DctType = _options.DctType.Replace("N", "");
            }
        }
    }

    WindowType[] _windowTypes = Enum.GetValues(typeof(WindowType)).Cast<WindowType>().ToArray();
    SpectrumType[] _spectrumTypes = Enum.GetValues(typeof(SpectrumType)).Cast<SpectrumType>().ToArray();
    NonLinearityType[] _nonLinearityTypes = Enum.GetValues(typeof(NonLinearityType)).Cast<NonLinearityType>().ToArray();


    async Task FileReady(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file is null)
            {
                return;
            }

            using var stream = new MemoryStream();

            await file.WriteToStreamAsync(stream);

            stream.Seek(0, SeekOrigin.Begin);

            var waveFile = new WaveFile(stream);
            _signal = waveFile[Channels.Left];

            await _signalPlot.UpdateAsync(_signal);

            var spectrogram = new Stft(512, 128).Spectrogram(_signal);
            _spectrogramPlot.Update(spectrogram);
        }
        catch (Exception e)
        {
            _errorText = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void ComputeMfcc()
    {
        try
        {
            _extractor = new MfccExtractor(_options);
            _vectors = _extractor.ComputeFrom(_signal);

            // correction of the 1st coefficient for compliance with python_speech_features

            if (_mfccMode == "psf")
            {
                if (_options.IncludeEnergy)
                {
                    for (var i = 0; i < _vectors.Count; i++)
                    {
                        _vectors[i][0] -= (float)Math.Log(2);
                    }
                }
                else
                {
                    for (var i = 0; i < _vectors.Count; i++)
                    {
                        _vectors[i][0] -= (float)(Math.Log(2) * Math.Sqrt(MelCount));
                    }
                }
            }
        }
        catch (Exception e)
        {
            _errorText = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    void SetMfccDefaults()
    {
        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            Window = WindowType.Hann
        };
    }

    void SetLibrosaDefaults()
    {
        var fftSize = 1024;
        var melCount = 40;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameSize = fftSize,
            HopSize = 512,
            FilterBank = FilterBanks.MelBankSlaney(melCount, fftSize, _signal.SamplingRate, _options.LowFrequency, _options.HighFrequency),
            SpectrumType = SpectrumType.Power,
            NonLinearity = NonLinearityType.ToDecibel,
            DctType = "2N",
            FftSize = fftSize,
            Window = WindowType.Hann,
            LogFloor = 1e-10f
        };
    }

    void SetKaldiDefaults()
    {
        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBankSize = 23,
            LowFrequency = 20,
            NonLinearity = NonLinearityType.LogE,
            DctType = "2N",
            Window = WindowType.Hann,
            PreEmphasis = 0.97,
            LifterSize = 22
        };
    }

    void SetPytorchDefaults()
    {
        var fftSize = 1024;
        var melCount = 24;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 13,
            FrameSize = fftSize,
            HopSize = 512,
            FilterBankSize = melCount,
            SpectrumType = SpectrumType.Power,
            NonLinearity = NonLinearityType.ToDecibel,
            DctType = "2N",
            FftSize = fftSize,
            Window = WindowType.Hann,
            LogFloor = 1e-10f
        };
    }

    void SetPythonSpeechFeaturesDefaults()
    {
        var fftSize = 512;
        var melCount = 26;

        _options = new MfccOptions
        {
            SamplingRate = _signal.SamplingRate,
            FeatureCount = 16,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            //FilterBankSize = melCount,
            FilterBank = PsfFilterbank(_signal.SamplingRate, melCount, fftSize),
            SpectrumType = SpectrumType.PowerNormalized,
            NonLinearity = NonLinearityType.LogE,
            DctType = "2N",
            FftSize = fftSize,
            PreEmphasis = 0.97,
            LifterSize = 22,
            IncludeEnergy = false,
            Window = WindowType.Hann,
        };
    }

    void ShowPythonCode()
    {
        var librosaTemplate = "librosa.feature.mfcc(\n" +
                              "    signal,\n" +
                              "    {0},\n" +
                              "    n_mfcc = {1},\n" +
                              "    dct_type={2},\n" +
                              "    norm='ortho',\n" +
                              "    window='hann',\n" +
                              "    htk=True,\n" +
                              "    n_mels={3},\n" +
                              "    n_fft={4},\n" +
                              "    hop_length={5},\n" +
                              "    center=False)";

        //var psfTemplate = "mfcc(\n" + 
        //                  "    signal,\n" + 
        //    samplerate = 16000,
        //    winlen = 0.025,
        //    winstep = 0.01,
        //    numcep = 16,
        //    nfilt = 26,
        //    nfft = 512,
        //    lowfreq = 0,
        //    highfreq = None,
        //    preemph = 0.97,
        //    ceplifter = 22,
        //    appendEnergy = False,
        //    winfunc = numpy.hanning
        //)


        // KALDI

        //torchaudio.compliance.kaldi.mfcc(
        //    signal,
        //    sample_frequency,
        //    num_ceps = 13,
        //    num_mel_bins = 23,
        //    frame_length = 25.0,
        //    frame_shift = 10.0,
        //    low_freq = 20.0,
        //    high_freq = 0.0,
        //    window_type = 'hanning',
        //    cepstral_lifter = 22.0,
        //    preemphasis_coefficient = 0.97,
        //    remove_dc_offset = False,
        //    use_energy = False
        //)


        // pytorch

        //n_fft = 1024
        //win_length = None
        //hop_length = 512
        //n_mels = 24
        //n_mfcc = 13

        //mfcc_transform = T.MFCC(
        //    sample_rate = sample_rate,
        //    n_mfcc = n_mfcc,
        //    melkwargs ={
        //            'n_fft': n_fft,
        //      'n_mels': n_mels,
        //      'hop_length': hop_length
        //     }
        //)

        //mfcc = mfcc_transform(signal)


        //melspec = librosa.feature.melspectrogram(
        //  y = waveform.numpy()[0], sr = sample_rate, n_fft = n_fft,
        //  win_length = win_length, hop_length = hop_length,
        //  n_mels = n_mels, htk = True, norm = None)

        //mfcc_librosa = librosa.feature.mfcc(
        //  S = librosa.core.spectrum.power_to_db(melspec),
        //  n_mfcc = n_mfcc, dct_type = 2, norm = 'ortho')



        _pythonCode = string.Format(
            librosaTemplate,
            _signal.SamplingRate,
            _options.FeatureCount,
            _options.DctType[0],
            MelCount,
            _options.FftSize,
            _options.HopSize);

        _clipboardMessage = "Copy to clipboard";
        _dialogIsOpen = true;
    }

    void ShowSharpCode()
    {

    }

    void ShowJson()
    {
        MemoryStream configStream;
        using (var ms = new MemoryStream())
        {
            ms.SaveOptions(_options);
            configStream = new MemoryStream(ms.ToArray()); // because ms is flushed inside SaveOptions()
        }

        using (var json = new StreamReader(configStream))
        {
            _pythonCode = json.ReadToEnd();
        }

        _clipboardMessage = "Copy to clipboard";
        _dialogIsOpen = true;
    }

    async Task CopyToClipboard()
    {
        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _pythonCode);

        _clipboardMessage = "Copied!";
    }


    /// <summary>
    /// Generates filterbank with weights identical to python_speech_features.
    /// </summary>
    float[][] PsfFilterbank(int samplingRate, int filterbankSize, int fftSize, double lowFreq = 0, double highFreq = 0)
    {
        var filterbank = new float[filterbankSize][];

        if (highFreq <= lowFreq)
        {
            highFreq = samplingRate / 2;
        }

        var low = NWaves.Utils.Scale.HerzToMel(lowFreq);
        var high = NWaves.Utils.Scale.HerzToMel(highFreq);

        var res = (fftSize + 1) / (float)samplingRate;

        var bins = Enumerable
                      .Range(0, filterbankSize + 2)
                      .Select(i => (float)Math.Floor(res * NWaves.Utils.Scale.MelToHerz(i * (high - low) / (filterbankSize + 1))))
                      .ToArray();

        for (var i = 0; i < filterbankSize; i++)
        {
            filterbank[i] = new float[fftSize / 2 + 1];

            for (var j = (int)bins[i]; j < (int)bins[i + 1]; j++)
            {
                filterbank[i][j] = (j - bins[i]) / (bins[i + 1] - bins[i]);
            }
            for (var j = (int)bins[i + 1]; j < (int)bins[i + 2]; j++)
            {
                filterbank[i][j] = (bins[i + 2] - j) / (bins[i + 2] - bins[i + 1]);
            }
        }

        return filterbank;
    }
}
