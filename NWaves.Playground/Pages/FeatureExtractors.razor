@page "/extractors"
@inject IJSRuntime jsRuntime

@using NWaves.Playground.Components; 


<h3>FeatureExtractors</h3>

<MatFileUpload Label="Drop a single WAV file here or Browse" OnChange="@FileReady" style="padding: 18px; width: 360px; margin: 20px;"></MatFileUpload>

<div style="width: 100%;">@_errorText</div>

<SignalPlot @ref="_signalPlot" />
<SpectrogramPlot @ref="_spectrogramPlot" />

@if (_signal is null)
{
    return;
}

<MatTabGroup>
    <MatTab Label="MFCC">
        <ChildContent>
            <Mfcc Signal="@_signal" />
        </ChildContent>
    </MatTab>
    <MatTab Label="MelSpectrogram">
        <ChildContent>
            <MelSpectrogram Signal="@_signal" />
        </ChildContent>
    </MatTab>

</MatTabGroup>

@code {
    SignalPlot _signalPlot;
    SpectrogramPlot _spectrogramPlot;

    DiscreteSignal _signal;

    string _errorText;

    async Task FileReady(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file is null)
            {
                return;
            }

            using var stream = new MemoryStream();

            await file.WriteToStreamAsync(stream);

            stream.Seek(0, SeekOrigin.Begin);

            var waveFile = new WaveFile(stream);
            _signal = waveFile[Channels.Left];

            await _signalPlot.UpdateAsync(_signal);

            var spectrogram = new Stft(512, 128).Spectrogram(_signal);
            _spectrogramPlot.Update(spectrogram);
        }
        catch (Exception e)
        {
            _errorText = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
