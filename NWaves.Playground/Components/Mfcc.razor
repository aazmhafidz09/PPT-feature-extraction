@inject IMatToaster Toaster

@using NWaves.Playground.Util;

<MatToastContainer />

<div id="main">
    <MatSelectItem Label="MFCC settings" @bind-Value="@MfccMode" Items="@_mfccModes"></MatSelectItem>

    <MatAccordion Multi style="margin-top: 25px; margin-bottom: 25px;">
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>General settings</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <p>
                    <MatTextField Label="Feature count" Outlined @bind-Value="@_options.FeatureCount"></MatTextField>
                </p>
                @if (_inSeconds)
                {
                    <p>
                        <MatTextField Label="Frame duration" Outlined @bind-Value="@_options.FrameDuration"></MatTextField>
                        <MatTextField Label="Hop duration" Outlined @bind-Value="@_options.HopDuration"></MatTextField>
                        <MatCheckbox @bind-Value="@_inSeconds" Label="In seconds"></MatCheckbox>
                    </p>
                }
                else
                {
                    <p>
                        <MatTextField Label="Frame size" Outlined @bind-Value="@_options.FrameSize"></MatTextField>
                        <MatTextField Label="Hop size" Outlined @bind-Value="@_options.HopSize"></MatTextField>
                        @if (_mfccMode != MfccMode.Librosa && _mfccMode != MfccMode.PyTorch)
                        {
                            <MatCheckbox @bind-Value="@_inSeconds" Label="In seconds"></MatCheckbox>
                        }
                    </p>
                }
                <p>
                    <MatSelectItem Label="Window type" @bind-Value="@_options.Window" Items="@_windowTypes"></MatSelectItem>
                </p>
                <p>
                    <MatTextField Label="Pre-emphasis" Outlined @bind-Value="@_options.PreEmphasis"></MatTextField>
                </p>
                <p>
                    <MatTextField Label="Lifter size" Outlined @bind-Value="@_options.LifterSize"></MatTextField>
                </p>
                <p>
                    <MatCheckbox @bind-Value="@_options.IncludeEnergy" Label="Include energy"></MatCheckbox>
                </p>
                @if (_mfccMode == MfccMode.Kaldi)
                {
                    <p>
                        <MatCheckbox @bind-Value="@_removeDcOffset" Label="Remove DC offset"></MatCheckbox>
                    </p>
                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>1) Spectrum</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatSelectItem Label="Spectrum type"
                               Items="@_spectrumTypes"
                               @bind-Value="@_options.SpectrumType"
                               Disabled="@(_mfccMode == MfccMode.Librosa || _mfccMode == MfccMode.PyTorch)">
                </MatSelectItem>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>2) Mel filters</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatTextField Label="Mel count" Outlined @bind-Value="@_melCount"></MatTextField>
                <MatTextField Label="Low frequency" Outlined @bind-Value="@_options.LowFrequency"></MatTextField>
                <MatTextField Label="High frequency" Outlined @bind-Value="@_options.HighFrequency"></MatTextField>
                <MatTextField Label="FFT size" Outlined @bind-Value="@_options.FftSize"></MatTextField>
                <MatTextField Label="Log floor" Outlined @bind-Value="@_options.LogFloor" Disabled="@(_mfccMode != MfccMode.Custom)"></MatTextField>
                <p>
                    <MatButton Dense="true" Icon="check_circle" OnClick="@UpdateFilterbank">Compute</MatButton>
                </p>
                <FilterbankPlot @ref="_filterbankPlot" OnReady="@UpdateFilterbank" />
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>3) Nonlinearity</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatSelectItem Label="Nonlinearity type"
                               Items="@_nonLinearityTypes"
                               @bind-Value="@_options.NonLinearity"
                               Disabled="@(_mfccMode != MfccMode.Custom)">
                </MatSelectItem>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>4) DCT</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatSelect Label="DCT type" @bind-Value="@DctType">
                    @for (var i = 1; i <= 4; i++)
                    {
                        var dct = i.ToString();
                        <MatOptionString Value="@dct">@dct</MatOptionString>
                    }
                </MatSelect>
                <MatCheckbox @bind-Value="@NormalizeDct" Label="Normalized"></MatCheckbox>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>

    <a id="github" href="https://github.com/ar1st0crat/NWaves/wiki/MFCC-and-Mel-Spectrogram">Read more about MFCC settings...</a>

    <MatButton Dense Icon="check_circle" OnClick="@ComputeMfcc">Compute</MatButton>
    <MatButton Dense Icon="check_circle" OnClick="@ShowPythonCode">Show Python code</MatButton>
    <MatButton Dense Icon="check_circle" OnClick="@ShowSharpCode">Show C# code</MatButton>
    <MatButton Dense Icon="check_circle" OnClick="@ShowJson">Show JSON</MatButton>

    @if (_vectors != null)
    {
        <MatTable Items="@_vectors.WithTimeMarkers(_extractor)" PageSize="10" Striped AllowSelection class="mat-elevation-z5">
            <MatTableHeader>
                <th class="coeff" style="min-width: 120px;">time pos</th>
                @foreach (var coeffName in _extractor.FeatureDescriptions)
                {
                    <th class="coeff" style="width: 8%;">@coeffName</th>
                }
            </MatTableHeader>
            <MatTableRow>
                <td class="coeff" style="min-width: 120px;">@(context[0].ToString("F3") + " sec")</td>
                @for (var i = 1; i < context.Length; i++)
                    {
                    <td class="coeff" style="width: 8%;">@context[i].ToString("F4")</td>
                    }
            </MatTableRow>
        </MatTable>
    }
</div>

<CodeSnippet @bind-Show="@_showCodeSnippet" Code="@_sourceCode"></CodeSnippet>

@code {
    [Parameter]
    public DiscreteSignal Signal { get; set; }

    FilterbankPlot _filterbankPlot;

    MfccOptions _options = new MfccOptions();
    MfccExtractor _extractor;
    List<float[]> _vectors;

    int _melCount;
    float[][] _filterbank;

    string _sourceCode;
    bool _showCodeSnippet;

    bool _inSeconds;
    bool _removeDcOffset;

    MfccMode[] _mfccModes = Enum.GetValues(typeof(MfccMode)).Cast<MfccMode>().ToArray();

    WindowType[] _windowTypes = Enum.GetValues(typeof(WindowType)).Cast<WindowType>().ToArray();

    SpectrumType[] _spectrumTypes = Enum.GetValues(typeof(SpectrumType)).Cast<SpectrumType>().ToArray();

    NonLinearityType[] _nonLinearityTypes = Enum.GetValues(typeof(NonLinearityType)).Cast<NonLinearityType>().ToArray();


    MfccMode _mfccMode;
    MfccMode MfccMode
    {
        get => _mfccMode;
        set
        {
            _mfccMode = value;
            SetDefaults();
        }
    }

    string DctType
    {
        get => _options.DctType.Substring(0, 1);
        set => _options.DctType = value + _options.DctType.Remove(0, 1);
    }

    bool NormalizeDct
    {
        get => _options.DctType.EndsWith('N');
        set
        {
            if (value)
            {
                if (!_options.DctType.EndsWith('N'))
                {
                    _options.DctType += "N";
                }
            }
            else
            {
                _options.DctType = _options.DctType.Replace("N", "");
            }
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        MfccMode = MfccMode.Custom;
    }

    void ComputeMfcc()
    {
        try
        {
            UpdateFilterbank();

            if (_mfccMode == MfccMode.Kaldi && _removeDcOffset)
            {
                var options = _options.Cast<MfccOptions, MfccOptions>(); // simply copy options
                options.Window = WindowType.Rectangular;
                _extractor = new MfccExtractorKaldi(options, _options.Window);
            }
            else
            {
                _extractor = new MfccExtractor(_options);
            }
            _vectors = _extractor.ComputeFrom(Signal);


            // correction of the 1st coefficient for compliance with python_speech_features

            if (_mfccMode == MfccMode.PythonSpeechFeatures)
            {
                if (_options.IncludeEnergy)
                {
                    for (var i = 0; i < _vectors.Count; i++)
                    {
                        _vectors[i][0] -= (float)Math.Log(2);
                    }
                }
                else
                {
                    for (var i = 0; i < _vectors.Count; i++)
                    {
                        _vectors[i][0] -= (float)(Math.Log(2) * Math.Sqrt(_melCount));
                    }
                }
            }
        }
        catch (Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, "Error!");
        }
    }

    void UpdateFilterbank()
    {
        if (_options.FftSize <= 0)
        {
            _options.FftSize =
                _options.FrameSize > 0 ?
                MathUtils.NextPowerOfTwo(_options.FrameSize) :
                MathUtils.NextPowerOfTwo((int)(_options.FrameDuration * Signal.SamplingRate));
        }

        if (_mfccMode == MfccMode.Librosa)
        {
            _options.FilterBank = FilterBanks.MelBankSlaney(_melCount,
                                                            _options.FftSize,
                                                            Signal.SamplingRate,
                                                            _options.LowFrequency,
                                                            _options.HighFrequency);
            _filterbank = _options.FilterBank;
        }
        else if (_mfccMode == MfccMode.PythonSpeechFeatures)
        {
            _options.FilterBank = PythonSpeechFeatures.FilterBank(Signal.SamplingRate,
                                                                  _melCount,
                                                                  _options.FftSize,
                                                                  _options.LowFrequency,
                                                                  _options.HighFrequency);
            _filterbank = _options.FilterBank;
        }
        else
        {
            _options.FilterBankSize = _melCount;

            var melBands = FilterBanks.MelBands(_melCount,
                                                Signal.SamplingRate,
                                                _options.LowFrequency,
                                                _options.HighFrequency);

            _filterbank = FilterBanks.Triangular(_options.FftSize,
                                                 Signal.SamplingRate,
                                                 melBands,
                                                 mapper: Scale.HerzToMel);
        }

        _filterbankPlot?.UpdateAsync(_filterbank);
    }

    void SetDefaults()
    {
        switch (_mfccMode)
        {
            case MfccMode.Librosa:
                SetLibrosaDefaults();
                break;
            case MfccMode.PyTorch:
                SetPytorchDefaults();
                break;
            case MfccMode.Kaldi:
                SetKaldiDefaults();
                break;
            case MfccMode.PythonSpeechFeatures:
                SetPythonSpeechFeaturesDefaults();
                break;
            default:
                SetMfccDefaults();
                break;
        }

        UpdateFilterbank();
    }

    void SetMfccDefaults()
    {
        _inSeconds = true;
        _melCount = 24;

        _options = new MfccOptions
        {
            SamplingRate = Signal.SamplingRate,
            FeatureCount = 13,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBankSize = _melCount,
            Window = WindowType.Hann
        };
    }

    void SetLibrosaDefaults()
    {
        _inSeconds = false;
        _melCount = 40;

        var fftSize = 1024;

        _options = new MfccOptions
        {
            SamplingRate = Signal.SamplingRate,
            FeatureCount = 13,
            FrameSize = fftSize,
            HopSize = 512,
            FilterBank = FilterBanks.MelBankSlaney(_melCount, fftSize, Signal.SamplingRate, _options.LowFrequency, _options.HighFrequency),
            SpectrumType = SpectrumType.Power,
            NonLinearity = NonLinearityType.ToDecibel,
            DctType = "2N",
            FftSize = fftSize,
            Window = WindowType.Hann,
            LogFloor = 1e-10f
        };
    }

    void SetKaldiDefaults()
    {
        _inSeconds = true;
        _removeDcOffset = false;
        _melCount = 23;

        _options = new MfccOptions
        {
            SamplingRate = Signal.SamplingRate,
            FeatureCount = 13,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBankSize = _melCount,
            LowFrequency = 20,
            NonLinearity = NonLinearityType.LogE,
            DctType = "2N",
            Window = WindowType.Hann,
            PreEmphasis = 0.97,
            LifterSize = 22
        };
    }

    void SetPytorchDefaults()
    {
        _inSeconds = false;
        _melCount = 24;

        var fftSize = 1024;

        _options = new MfccOptions
        {
            SamplingRate = Signal.SamplingRate,
            FeatureCount = 13,
            FrameSize = fftSize,
            HopSize = 512,
            FilterBankSize = _melCount,
            SpectrumType = SpectrumType.Power,
            NonLinearity = NonLinearityType.ToDecibel,
            DctType = "2N",
            FftSize = fftSize,
            Window = WindowType.Hann,
            LogFloor = 1e-10f
        };
    }

    void SetPythonSpeechFeaturesDefaults()
    {
        _inSeconds = true;
        _melCount = 26;

        var fftSize = 512;

        _options = new MfccOptions
        {
            SamplingRate = Signal.SamplingRate,
            FeatureCount = 16,
            FrameDuration = 0.025,
            HopDuration = 0.01,
            FilterBank = PythonSpeechFeatures.FilterBank(Signal.SamplingRate, _melCount, fftSize),
            SpectrumType = SpectrumType.PowerNormalized,
            NonLinearity = NonLinearityType.LogE,
            DctType = "2N",
            FftSize = fftSize,
            PreEmphasis = 0.97,
            LifterSize = 22,
            IncludeEnergy = false,
            Window = WindowType.Hann,
        };
    }

    void ShowPythonCode()
    {
        _sourceCode = MfccTemplates.PythonCode(_mfccMode, _options, _inSeconds, _removeDcOffset);
        _showCodeSnippet = true;
    }

    void ShowSharpCode()
    {
        _sourceCode = MfccTemplates.CSharpCode(_mfccMode, _options, _inSeconds, _removeDcOffset);
        _showCodeSnippet = true;
    }

    void ShowJson()
    {
        MemoryStream configStream;
        using (var ms = new MemoryStream())
        {
            ms.SaveOptions(_options);
            configStream = new MemoryStream(ms.ToArray()); // because ms is flushed inside SaveOptions()
        }

        using (var json = new StreamReader(configStream))
        {
            _sourceCode = json.ReadToEnd();
        }

        _showCodeSnippet = true;
    }
}
