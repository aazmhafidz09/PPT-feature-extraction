@inject IMatToaster Toaster

@using NWaves.Playground.Util;

<MatToastContainer />

<div id="main">
    <MatAccordion Multi style="margin-top: 25px; margin-bottom: 25px;">
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>General settings</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatTextField Label="Frame size" Outlined @bind-Value="@_options.FrameSize"></MatTextField>
                <MatTextField Label="Hop size" Outlined @bind-Value="@_options.HopSize"></MatTextField>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>1) Spectrum</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatSelectItem Label="Spectrum type" @bind-Value="@_options.SpectrumType" Items="@_spectrumTypes"></MatSelectItem>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>2) Mel filters</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatTextField Label="Mel count" Outlined @bind-Value="@_melCount"></MatTextField>
                <MatTextField Label="Low frequency" Outlined @bind-Value="@_options.LowFrequency"></MatTextField>
                <MatTextField Label="High frequency" Outlined @bind-Value="@_options.HighFrequency"></MatTextField>
                <MatTextField Label="FFT size" Outlined @bind-Value="@_options.FftSize"></MatTextField>
                <MatCheckbox @bind-Value="@_slaney" Label="Slaney (default in librosa)"></MatCheckbox>
                <p>
                    <MatButton Dense Icon="check_circle" OnClick="@UpdateFilterbank">Compute</MatButton>
                </p>
                <FilterbankPlot @ref="_filterbankPlot" OnReady="@UpdateFilterbank" />
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>3) Nonlinearity</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatSelectItem Label="Nonlinearity type" @bind-Value="@_options.NonLinearity" Items="@_nonLinearityTypes"></MatSelectItem>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>

    <a id="github" href="https://github.com/ar1st0crat/NWaves/wiki/MFCC-and-Mel-Spectrogram">Read more about mel-spectrogram settings...</a>

    <MatButton Dense Icon="check_circle" OnClick="@ComputeMelSpectrogram">Compute</MatButton>
    <MatButton Dense Icon="check_circle" OnClick="@ShowPythonCode">Show Python code</MatButton>
    <MatButton Dense Icon="check_circle" OnClick="@ShowSharpCode">Show C# code</MatButton>
    <MatButton Dense Icon="check_circle" OnClick="@ShowJson">Show JSON</MatButton>

    @if (_melSpectrogram != null)
    {
        <MatTable Items="@_melSpectrogram" PageSize="10" Striped AllowSelection class="mat-elevation-z5">
            <MatTableHeader>
                @foreach (var coeffName in _extractor.FeatureDescriptions)
                {
                    <th class="coeff">@coeffName</th>
                }
            </MatTableHeader>
            <MatTableRow>
                @foreach (var coeff in context)
                {
                    <td class="coeff">@coeff.ToString("F4")</td>
                }
            </MatTableRow>
        </MatTable>
    }
</div>

<CodeSnippet @bind-Show="@_showCodeSnippet" Code="@_sourceCode"></CodeSnippet>

@code {
    [Parameter]
    public DiscreteSignal Signal { get; set; }

    FilterbankPlot _filterbankPlot;

    FilterbankExtractor _extractor;
    FilterbankOptions _options = new FilterbankOptions();
    List<float[]> _melSpectrogram;

    int _melCount;
    bool _slaney;

    string _sourceCode;
    bool _showCodeSnippet;

    WindowType[] _windowTypes = Enum.GetValues(typeof(WindowType)).Cast<WindowType>().ToArray();

    SpectrumType[] _spectrumTypes = Enum.GetValues(typeof(SpectrumType)).Cast<SpectrumType>().ToArray();

    NonLinearityType[] _nonLinearityTypes = Enum.GetValues(typeof(NonLinearityType)).Cast<NonLinearityType>().ToArray();


    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetDefaults();
    }

    void ComputeMelSpectrogram()
    {
        try
        {
            UpdateFilterbank();

            _extractor = new FilterbankExtractor(_options);
            _melSpectrogram = _extractor.ComputeFrom(Signal);
        }
        catch (Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, "Error!");
        }
    }

    void SetDefaults()
    {
        _melCount = 40;

        _options = new FilterbankOptions
        {
            SamplingRate = Signal.SamplingRate,
            FrameSize = 1024,
            FftSize = 1024,
            HopSize = 512,
            Window = WindowType.Hann,
            FilterBank = FilterBanks.Triangular(1024, Signal.SamplingRate, FilterBanks.MelBands(_melCount, Signal.SamplingRate)),
        };
    }

    void UpdateFilterbank()
    {
        if (_options.FftSize <= 0)
        {
            _options.FftSize = MathUtils.NextPowerOfTwo(_options.FrameSize);
        }

        if (_slaney)
        {
            _options.FilterBank = FilterBanks.MelBankSlaney(_melCount,
                                                            _options.FftSize,
                                                            Signal.SamplingRate,
                                                            _options.LowFrequency,
                                                            _options.HighFrequency);
        }
        else
        {
            var melBands = FilterBanks.MelBands(_melCount,
                                                Signal.SamplingRate,
                                                _options.LowFrequency,
                                                _options.HighFrequency);
            
            _options.FilterBank = FilterBanks.Triangular(_options.FftSize,
                                                         Signal.SamplingRate,
                                                         melBands,
                                                         mapper: Scale.HerzToMel);
        }

        _filterbankPlot?.UpdateAsync(_options.FilterBank);
    }

    void ShowPythonCode()
    {
        _sourceCode = MfccTemplates.PythonCode(_options, _slaney);
        _showCodeSnippet = true;
    }

    void ShowSharpCode()
    {
        _sourceCode = MfccTemplates.CSharpCode(_options, _slaney);
        _showCodeSnippet = true;
    }

    void ShowJson()
    {
        MemoryStream configStream;
        using (var ms = new MemoryStream())
        {
            ms.SaveOptions(_options);
            configStream = new MemoryStream(ms.ToArray()); // because ms is flushed inside SaveOptions()
        }

        using (var json = new StreamReader(configStream))
        {
            _sourceCode = json.ReadToEnd();
        }

        _showCodeSnippet = true;
    }

}
